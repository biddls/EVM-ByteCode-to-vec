import json
import networkx as nx
import matplotlib.pyplot as plt
from glob import glob
# from tqdm import tqdm


class CFG_Reader:
    """
    Reads the JSON file generated by EtherSolve and stores the parsed opcodes
    """

    graph: nx.DiGraph | None = None
    path: str

    def __init__(self, path: str, genGraph: bool = False) -> None:
        self.parsedOpcodes: list[list[str]] = list()
        self.path = path
        # Load JSON data from file
        with open(path, "r") as json_file:
            data = json.load(json_file)

        if genGraph:
            # Create a directed graph
            self.graph = nx.DiGraph()

            # Add nodes
            for node in data["runtimeCfg"]["nodes"]:
                self.graph.add_node(
                    node["offset"],
                    # type=node["type"],
                    parsedOpcodes=node["parsedOpcodes"],
                )

            # Add edges
            for successor in data["runtimeCfg"]["successors"]:
                from_node = successor["from"]
                to_nodes = successor["to"]
                for to_node in to_nodes:
                    self.graph.add_edge(from_node, to_node)

        # Get the opcodes from the JSON file
        nodes = data["runtimeCfg"]["nodes"]
        # splits the opcodes into a list of opcodes
        parsedOpcodes: list[str] = [
            node["parsedOpcodes"].split("\n") for node in nodes
            ]
        # cleans the opcodes
        for i in range(len(parsedOpcodes)):
            temp = [
                opcode.split(" ", maxsplit=1)[1] for opcode in parsedOpcodes[i]
            ]
            self.parsedOpcodes.append(temp)

        # TODO store the links between the opcodes also

    def drawGraph(self) -> None:
        if self.graph is None:
            raise Exception("Graph not generated")
        # Draw the graph
        pos = nx.spring_layout(self.graph)  # You can use other layouts as well
        nx.draw(
            self.graph,
            pos,
            node_size=10,
            node_color="skyblue",
            arrowsize=10)
        plt.show()

    def __repr__(self) -> str:
        return self.path

if __name__ == "__main__":
    # Get all the JSON files in the directory
    files = glob("./src/ControlFlowGraphs/evmOut/*.json")
    for file in files:
        cfg = CFG_Reader(file)
        total = 0
        for opCode in cfg.parsedOpcodes:
            total += len(opCode)
        print(len(cfg.parsedOpcodes), total)
        break
