import json
import networkx as nx
import matplotlib.pyplot as plt
from glob import glob


class CFG_Reader:
    """
    Reads the JSON file generated by EtherSolve and stores the parsed opcodes
    """
    graph: nx.DiGraph
    path: str
    addr: str
    parsedOpcodes: list[list[str]] = list()

    def __init__(self, path: str) -> None:
        self.path = path
        self.addr = path.split("\\")[-1].split(".")[0]
        # Load JSON data from file
        with open(path, "r") as json_file:
            data: dict = json.load(json_file)

        # Get the opcodes from the JSON file
        nodes = data["runtimeCfg"]["nodes"]
        # splits the opcodes into a list of opcodes
        parsedOpcodes: list[str] = [
            node["parsedOpcodes"].split("\n") for node in nodes
            ]
        # cleans the opcodes
        for i in range(len(parsedOpcodes)):
            temp = [
                opcode.split(" ", maxsplit=1)[1] for opcode in parsedOpcodes[i]
            ]
            self.parsedOpcodes.append(temp)

        # Generate the graph
        self.generateGraph(data)

    def generateGraph(self, data) -> None:
        # Create a directed graph
        self.graph = nx.DiGraph()

        # Add nodes
        for node, parsedOpcode in zip(data["runtimeCfg"]["nodes"], self.parsedOpcodes):
            self.graph.add_node(
                node["offset"],
                # type=node["type"],
                parsedOpcode=parsedOpcode,
            )

        # Add edges
        for successor in data["runtimeCfg"]["successors"]:
            from_node = successor["from"]
            to_nodes = successor["to"]
            for to_node in to_nodes:
                self.graph.add_edge(from_node, to_node)

    def drawGraph(self) -> None:
        if self.graph is None:
            raise Exception("Graph not generated")
        # Draw the graph
        pos = nx.spring_layout(self.graph)  # You can use other layouts as well
        nx.draw(
            self.graph,
            pos,
            node_size=10,
            node_color="skyblue",
            arrowsize=10)
        plt.show()

    def applyVectorEncodings(self) -> None:
        """
        Applies vector encoding to the parsed opcodes
        """
        ...

    def __repr__(self) -> str:
        return self.path

    def nodeCount(self) -> int:
        return len(self.graph.nodes)

    def edgeCount(self) -> int:
        return len(self.graph.edges)

    def getParsedOpcodes(self): # -> list[list[str]]:
        return self.graph.nodes.data()



if __name__ == "__main__":
    # Get all the JSON files in the directory
    files = glob("./src/ControlFlowGraphs/evmOut/*.json")
    for file in files:
        cfg = CFG_Reader(file)
        total = 0
        for opCode in cfg.parsedOpcodes:
            total += len(opCode)
        print(len(cfg.parsedOpcodes), total)
        break
