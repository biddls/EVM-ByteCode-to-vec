from collections import Counter
import json
import networkx as nx
import matplotlib.pyplot as plt
from glob import glob


class CFG_Reader:
    """
    Reads the JSON file generated by EtherSolve and stores the parsed opcodes
    """
    graph: nx.DiGraph
    path: str
    addr: str
    parsedOpcodes: list[list[str]]
    tokens: list[list[str | tuple[str, str]]]

    def __init__(self, path: str) -> None:
        self.path = path
        self.addr = path.split("\\")[-1].split(".")[0]
        # Load JSON data from file
        with open(path, "r") as json_file:
            self.data: dict = json.load(json_file)

        # Get the opcodes from the JSON file
        nodes = self.data["runtimeCfg"]["nodes"]
        # splits the opcodes into a list of opcodes
        parsedOpcodes: list[str] = [
            node["parsedOpcodes"].split("\n") for node in nodes
            ]
        # cleans the opcodes
        self.parsedOpcodes = list()
        for i in range(len(parsedOpcodes)):
            temp = [
                opcode.split(" ", maxsplit=1)[1] for opcode in parsedOpcodes[i]
            ]
            self.parsedOpcodes.append(temp)

    def generateGraph(self) -> None:
        # Create a directed graph
        self.graph = nx.DiGraph()

        if len(self.parsedOpcodes) != len(self.data["runtimeCfg"]["nodes"]):
            raise ValueError("The number of parsed opcodes does not match the number of nodes in the CFG")

        # Add nodes
        index = 0
        for node in self.data["runtimeCfg"]["nodes"]:
            self.graph.add_node(
                node["offset"],
                # type=node["type"],
                parsedOpcode=self.parsedOpcodes[index],
                internal_index=index
            )
            index += 1

        # Add edges
        for successor in self.data["runtimeCfg"]["successors"]:
            from_node = successor["from"]
            to_nodes = successor["to"]
            for to_node in to_nodes:
                self.graph.add_edge(from_node, to_node)

    def drawGraph(self) -> None:
        if self.graph is None:
            self.generateGraph()
        # Draw the graph
        pos = nx.spring_layout(self.graph)  # You can use other layouts as well
        nx.draw(
            self.graph,
            pos,
            node_size=10,
            node_color="skyblue",
            arrowsize=10)
        plt.show()

    def __repr__(self) -> str:
        return self.path

    def nodeCount(self) -> int:
        if self.graph is None:
            self.generateGraph()
        return len(self.graph.nodes)

    def edgeCount(self) -> int:
        if self.graph is None:
            self.generateGraph()
        return len(self.graph.edges)

    def getParsedOpcodes(self):
        if self.graph is None:
            self.generateGraph()
        return self.graph.nodes.data()

    def addIndex(self, node: int, index: int) -> None:
        """
        Parameters:
        node: int
            The node to add the index to
        index: int
            The external index to add to the node
        """

        if self.graph is None:
            self.generateGraph()
        self.graph.nodes[node]["index"] = index

    def gen_indexes(
        self,
        tokens: list[tuple[int | tuple[int, int]]],
        counts: Counter[tuple[int | tuple[int, int]]]):
        """
        Parameters:
        tokens: list[tuple[int | tuple[int, int]]]
            The tokens to be indexed
        counts: Counter[tuple[int | tuple[int, int]]]
            The current collection of tokens that have been processed (inc)
        """

        # check if the number of tokens equals the number of nodes
        if len(tokens) != len(self.parsedOpcodes):
            raise ValueError("The number of tokens does not match the number of nodes in the CFG")

        # for each node in the CFG
        for token in tokens:
            ...


if __name__ == "__main__":
    # Get all the JSON files in the directory
    files = glob("./src/ControlFlowGraphs/evmOut/*.json")
    for file in files:
        cfg = CFG_Reader(file)
        total = 0
        for opCode in cfg.parsedOpcodes:
            total += len(opCode)
        print(len(cfg.parsedOpcodes), total)
        break
